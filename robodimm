#!/usr/bin/env python3.6
#
# This file is part of robodimmd.
#
# robodimmd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# robodimmd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with robodimmd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest measurement from robodimmd"""

import datetime
import json
import os
import sys
import Pyro4
from warwick.observatory.common import daemons

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_RED = u'\033[91m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'

def print_status():
    """Prints the latest environment data in human-readable form"""
    try:
        with daemons.ing_robodimm.connect() as robodimm:
            latest = robodimm.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the ING RoboDIMM daemon')
        return 1

    if latest is None:
        print('error: failed to query data')
    elif not latest['seeing_valid']:
        print(FMT_BOLD + FMT_RED + "NO DATA" + FMT_CLEAR)
    else:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        seeing_date = datetime.datetime.strptime(latest['seeing_date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received ' + FMT_BOLD + str(date) + ':' + FMT_CLEAR)
        print('   RoboDIMM seeing: {2}{0:.2f}{3}": (at {2}{1}{3})'.format(
            latest['seeing'], seeing_date, FMT_BOLD, FMT_CLEAR))

    return 0

def print_json():
    """Prints the latest environment data in machine-readable form"""
    latest = None
    try:
        with daemons.ing_robodimm.connect() as robodimm:
            latest = robodimm.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the ING RoboDIMM daemon')
        return 1

    print(json.dumps(latest))

    return 0

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} <command>'.format(name))
    print()
    print('   status      print a human-readable summary of the ING RoboDIMM seeing')
    print('   json        print a machine-readable summary of the ING RoboDIMM seeing')
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage(SCRIPT_NAME))

    if sys.argv[1] == 'status':
        sys.exit(print_status())
    elif sys.argv[1] == 'json':
        sys.exit(print_json())

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))
